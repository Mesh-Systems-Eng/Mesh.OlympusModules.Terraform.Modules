name: Test Terraform Safety Gate

on:
  workflow_dispatch:
  push:

jobs:
  test-safety-gate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Test Safety Gate Agent
        id: test-safety-gate
        run: |
          # Static test plan (APPROVE case)
          PLAN_JSON='{
            "format_version": "1.2",
            "terraform_version": "1.6.0", 
            "resource_changes": [
              {
                "address": "azurerm_application_gateway.web_gateway",
                "type": "azurerm_application_gateway",
                "change": {
                  "actions": ["update"]
                }
              },
              {
                "address": "azurerm_virtual_network.main",
                "type": "azurerm_virtual_network",
                "change": {
                  "actions": ["create"]
                }
              },
              {
                "address": "azurerm_subnet.app_subnet",
                "type": "azurerm_subnet",
                "change": {
                  "actions": ["create"]
                }
              },
              {
                "address": "azurerm_network_security_group.app_nsg",
                "type": "azurerm_network_security_group",
                "change": {
                  "actions": ["create"]
                }
              },
              {
                "address": "azurerm_storage_account.app_storage",
                "type": "azurerm_storage_account",
                "change": {
                  "actions": ["create"]
                }
              },
              {
                "address": "azurerm_app_service_plan.app_service_plan",
                "type": "azurerm_app_service_plan",
                "change": {
                  "actions": ["create"]
                }
              },
              {
                "address": "azurerm_app_service.web_app",
                "type": "azurerm_app_service",
                "change": {
                  "actions": ["create"]
                }
              }
            ]
          }'

          LOGIC_APP_URL="https://dvaila.azurewebsites.net:443/api/DvTerraformPlanEvaluator/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=1FUBDdM573hX09C8BVrjezktAM6B9rpAyKY7fJewaqs"
          
          # Call Logic App
          RESPONSE=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"terraform_plan\": $PLAN_JSON,
              \"environment\": \"test\",
              \"source\": \"github-test\"
            }" \
            "$LOGIC_APP_URL")
          
          # Extract status and body
          HTTP_STATUS="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          echo "Status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          
          # Set outputs for conditional steps with error handling
          if echo "$RESPONSE_BODY" | jq -e . >/dev/null 2>&1; then
            echo "decision=$(echo "$RESPONSE_BODY" | jq -r '.decision // "UNKNOWN"')" >> $GITHUB_OUTPUT
            echo "summary=$(echo "$RESPONSE_BODY" | jq -r '.summary // "No summary available"')" >> $GITHUB_OUTPUT
            echo "risk_level=$(echo "$RESPONSE_BODY" | jq -r '.risk_level // "UNKNOWN"')" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Invalid JSON response received"
            echo "Raw response: $RESPONSE_BODY"
            echo "decision=ERROR" >> $GITHUB_OUTPUT
            echo "summary=Invalid JSON response" >> $GITHUB_OUTPUT
            echo "risk_level=ERROR" >> $GITHUB_OUTPUT
          fi

          # Show result but don't fail the step (so we can test conditional logic)
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Safety Gate APPROVED (expected!)"
            echo "Safe plan with only creates and updates"
          else
            echo "‚ùå Safety Gate BLOCKED (unexpected)"
            echo "This plan should have been approved"
          fi

      - name: Proceed with Deployment (Only if Approved)
        if: steps.test-safety-gate.outputs.decision == 'APPROVE'
        run: |
          echo "üöÄ Proceeding with Terraform deployment..."
          echo "Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo "Summary: ${{ steps.test-safety-gate.outputs.summary }}"
          echo ""
          echo "‚úÖ This step should run because the plan contains only safe operations!"
          echo "Creating new resources and updating existing ones is allowed."

      - name: Deployment Blocked
        if: steps.test-safety-gate.outputs.decision == 'BLOCK'
        run: |
          echo "üõë Deployment blocked by safety gate"
          echo "Decision: ${{ steps.test-safety-gate.outputs.decision }}"
          echo "Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo "Summary: ${{ steps.test-safety-gate.outputs.summary }}"
          echo ""
          echo "‚ùå This should NOT happen for plans with only safe operations"

      - name: Show Test Results
        if: always()
        run: |
          echo "=== TEST RESULTS ==="
          echo "Expected: APPROVE decision with HTTP 200"
          echo "Actual Decision: ${{ steps.test-safety-gate.outputs.decision }}"
          echo "Actual Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo ""
          if [ "${{ steps.test-safety-gate.outputs.decision }}" = "APPROVE" ]; then
            echo "‚úÖ TEST PASSED: Safety gate correctly approved safe plan"
          else
            echo "‚ùå TEST FAILED: Safety gate should have approved this plan"
          fi