name: Test Terraform Safety Gate

on:
  workflow_dispatch:
  push:

jobs:
  test-safety-gate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Test Safety Gate Agent
        run: |
          # Static test plan (APPROVE case)
          PLAN_JSON='{
            "format_version": "1.2",
            "terraform_version": "1.6.0", 
            "resource_changes": [
              {
                "address": "azurerm_cosmosdb_account.production_database",
                "type": "azurerm_cosmosdb_account",
                "change": {
                  "actions": ["delete"]
                }
              },
              {
                "address": "azurerm_key_vault.production_secrets",
                "type": "azurerm_key_vault",
                "change": {
                  "actions": ["delete"]
                }
              },
              {
                "address": "azurerm_sql_database.customer_data",
                "type": "azurerm_sql_database",
                "change": {
                  "actions": ["delete"]
                }
              },
              {
                "address": "azurerm_application_gateway.web_gateway",
                "type": "azurerm_application_gateway",
                "change": {
                  "actions": ["update"]
                }
              }
            ]
          }'

          LOGIC_APP_URL="https://dvaila.azurewebsites.net:443/api/DvTerraformPlanEvaluator/triggers/When_a_HTTP_request_is_received/invoke?api-version=2022-05-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=1FUBDdM573hX09C8BVrjezktAM6B9rpAyKY7fJewaqs"
          
          # Call Logic App
          RESPONSE=$(curl -s -w "%{http_code}" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{
              \"terraform_plan\": $PLAN_JSON,
              \"environment\": \"test\",
              \"source\": \"github-test\"
            }" \
            "$LOGIC_APP_URL")
          
          # Extract status and body
          HTTP_STATUS="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          echo "Status: $HTTP_STATUS"
          echo "Response: $RESPONSE_BODY"
          
          # Set outputs for conditional steps
          echo "decision=$(echo '$RESPONSE_BODY' | jq -r '.decision')" >> $GITHUB_OUTPUT
          echo "summary=$(echo '$RESPONSE_BODY' | jq -r '.summary')" >> $GITHUB_OUTPUT
          echo "risk_level=$(echo '$RESPONSE_BODY' | jq -r '.risk_level')" >> $GITHUB_OUTPUT

          # Show result but don't fail the step (so we can test conditional logic)
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "‚úÖ Safety Gate APPROVED (unexpected!)"
          else
            echo "‚ùå Safety Gate BLOCKED (expected)"
            echo "Critical issues detected in the plan"
          fi

      - name: Proceed with Deployment (Only if Approved)
        if: steps.test-safety-gate.outputs.decision == 'APPROVE'
        run: |
          echo "üöÄ Proceeding with Terraform deployment..."
          echo "Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo "Summary: ${{ steps.test-safety-gate.outputs.summary }}"
          echo ""
          echo "This step should NOT run because the plan contains critical deletions!"
          echo "If you see this message, something is wrong with the safety gate."

      - name: Deployment Blocked
        if: steps.test-safety-gate.outputs.decision == 'BLOCK'
        run: |
          echo "üõë Deployment blocked by safety gate"
          echo "Decision: ${{ steps.test-safety-gate.outputs.decision }}"
          echo "Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo "Summary: ${{ steps.test-safety-gate.outputs.summary }}"
          echo ""
          echo "‚úÖ This is the expected behavior for plans with critical resource deletions"

      - name: Show Test Results
        if: always()
        run: |
          echo "=== TEST RESULTS ==="
          echo "Expected: BLOCK decision with HTTP 400"
          echo "Actual Decision: ${{ steps.test-safety-gate.outputs.decision }}"
          echo "Actual Risk Level: ${{ steps.test-safety-gate.outputs.risk_level }}"
          echo ""
          if [ "${{ steps.test-safety-gate.outputs.decision }}" = "BLOCK" ]; then
            echo "‚úÖ TEST PASSED: Safety gate correctly blocked dangerous plan"
          else
            echo "‚ùå TEST FAILED: Safety gate should have blocked this plan"
          fi